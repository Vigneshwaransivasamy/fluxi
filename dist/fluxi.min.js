!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.fluxi={})}(this,function(t){"use strict";function e(t){var e=[],n=t.length;let r=0;for(;n>r;)e.push(t[r]),r++;return e}function n(t,e){return function(){return e.call(this,t.apply(this,arguments))}}function r(t,e){return function(){return new Promise((n,r)=>(t.apply(this,arguments).then(function(t){n(e.call(this,t))}).catch(r),e))}}function o(){var t;s(arguments[0])?(t=arguments[0],Array.prototype.shift.call(arguments)):t=!0;var e=arguments,o=0,i=arguments.length,c=arguments[0],u=t?n:r;if(1==i)return arguments[0];if(2==i)return u(e[0],e[1]);for(;i-1>o;)c=u(c,e[o+1]),o++;return c}function i(t){for(var e="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-",r=0;t>r;r++)e+=n.charAt(Math.floor(64*Math.random()));return e}function c(t,e){for(var n in t)b(t[n])&&(t[n]=a(t[n],e));return t}function u(t,e){return e.has(t)?e.delete(t):Error("Type Error: subscriber should be of type Function")}function l(t,e){return t.subscribe=function(t){if(f(Function)(t)){var n=d();return e.set(n,t),u.bind(this,n,e)}return Error("Type Error: subscriber should be of type Function")},t}function a(t,e){function n(t){o.forEach(function(e){e(t)})}var r=!e,o=e||new Map,i={get:function(t,e){return t[e]},set:function(t,e,r){var i=null,c=null,u={};if(t[e]){if(i="UPDATE",(c=t[e])==r)return;t[e]=r}else i="NEW",t[e]=y(r)?r:a(r,o);return u={action:i,actionRoot:t,key:e,value:r},"update"==i&&(u.oldValue=c),n(u),t[e]}};return t=new Proxy(c(t,o),i),r?l(t,o):t}const f=t=>e=>Object(e)instanceof t,s=t=>f(Boolean)(t);var p=Object.prototype.toString;const b=t=>"[object Object]"===p.call(t),y=t=>f(String)(t);var d=()=>i(32);var h=Object.prototype.toString;var j=Object.prototype.toString;var v=Object.prototype.toString;var g=Object.prototype.toString;var m=Object.prototype.toString;var N=Object.prototype.toString;t.curry=function(t){return function(){return t.length==arguments.length?t(...arguments):t.bind(null,...arguments)}},t.debug=function(...t){var n=e(t);n.splice(0,0,window.performance?" : "+(window.performance.now()/1e3).toFixed(3)+": ":" : "+Date()+" : "),console.log(...n)},t.filler=function(){return"__EMPTY__"},t.pipe2=n,t.pipeN=o,t.syncPipe2=r,t.syncPipeN=function(){return Array.prototype.unshift.call(arguments,!1),o.apply(this,arguments)},t.proxr=a,t.is=f,t.isArray=(t=>f(Array)(t)),t.isBoolean=s,t.isDate=(t=>"[object Date]"===h.call(t)),t.isFunction=(t=>f(Function)(t)),t.isNaN=(t=>"[object NaN]"===j.call(t)),t.isNull=(t=>"[object Null]"===v.call(t)),t.isNumber=(t=>f(Number)(t)),t.isObject=b,t.isPromise=(t=>"[object Promise]"===g.call(t)),t.isRegex=(t=>f(RegExp)(t)),t.isString=y,t.isSymbol=(t=>"[object Symbol]"===m.call(t)),t.isUndefined=(t=>"[object Undefined]"===N.call(t)),Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
