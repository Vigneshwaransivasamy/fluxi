!function(t,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(t.fluxi={})}(this,function(t){"use strict";function r(t){var r=[],e=t.length;let n=0;for(;e>n;)r.push(t[n]),n++;return r}function e(t,r){return function(){return r.call(this,t.apply(this,arguments))}}function n(t,r){return function(){return new Promise((e,n)=>(t.apply(this,arguments).then(function(t){e(r.call(this,t))}).catch(n),r))}}function o(){var t;s(arguments[0])?(t=arguments[0],Array.prototype.shift.call(arguments)):t=!0;var r=arguments,o=0,i=arguments.length,c=arguments[0],u=t?e:n;if(1==i)return arguments[0];if(2==i)return u(r[0],r[1]);for(;i-1>o;)c=u(c,r[o+1]),o++;return c}function i(t){for(var r="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-",n=0;t>n;n++)r+=e.charAt(Math.floor(64*Math.random()));return r}function c(t,r){for(var e in t)b(t[e])&&(t[e]=a(t[e],r));return t}function u(t,r){return r.has(t)?r.delete(t):Error("Type Error: subscriber should be of type Function")}function l(t,r){return t.subscribe=function(t){if(f(Function)(t)){var e=d();return r.set(e,t),u.bind(this,e,r)}return Error("Type Error: subscriber should be of type Function")},t}function a(t,r){function e(t){o.forEach(function(r){r(t)})}var n=!r,o=r||new Map,i={get:function(t,r){return t[r]},set:function(t,r,n){var i=null,c=null,u={};if(t[r]){if(i="UPDATE",(c=t[r])==n)return;t[r]=n}else i="NEW",t[r]=y(n)?n:a(n,o);return u=t[r],"update"==i&&(u.oldValue=c),e(u),t[r]}};return t=new Proxy(c(t,o),i),n?l(t,o):t}const f=t=>r=>Object(r)instanceof t,s=t=>f(Boolean)(t);var p=Object.prototype.toString;const b=t=>"[object Object]"===p.call(t),y=t=>f(String)(t);var d=()=>i(32);var h=Object.prototype.toString;var j=Object.prototype.toString;var g=Object.prototype.toString;var v=Object.prototype.toString;var m=Object.prototype.toString;var N=Object.prototype.toString;t.curry=function(t){return function(){return t.length==arguments.length?t(...arguments):t.bind(null,...arguments)}},t.debug=function(...t){var e=r(t);e.splice(0,0,window.performance?" : "+(window.performance.now()/1e3).toFixed(3)+": ":" : "+Date()+" : "),console.log(...e)},t.filler=function(){return"__EMPTY__"},t.pipe2=e,t.pipeN=o,t.syncPipe2=n,t.syncPipeN=function(){return Array.prototype.unshift.call(arguments,!1),o.apply(this,arguments)},t.proxr=a,t.is=f,t.isArray=(t=>f(Array)(t)),t.isBoolean=s,t.isDate=(t=>"[object Date]"===h.call(t)),t.isFunction=(t=>f(Function)(t)),t.isNaN=(t=>"[object NaN]"===j.call(t)),t.isNull=(t=>"[object Null]"===g.call(t)),t.isNumber=(t=>f(Number)(t)),t.isObject=b,t.isPromise=(t=>"[object Promise]"===v.call(t)),t.isRegex=(t=>f(RegExp)(t)),t.isString=y,t.isSymbol=(t=>"[object Symbol]"===m.call(t)),t.isUndefined=(t=>"[object Undefined]"===N.call(t)),Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
